global
  log 127.0.0.1 local6
  maxconn  ${options.maxconn}
  user     ${options.user}
  group    ${options.group}
  daemon
  nbproc 1

defaults
  mode http

  # The zope instances have maxconn 1, and it is important that
  # unused/idle connections are closed as soon as possible.
  option httpclose

  # Remove requests from the queue if people press stop button
  option abortonclose
  option forwardfor

  # Try to connect this many times on failure
  retries 3

  # If a client is bound to a particular backend but it goes down,
  # send them to a different one
  option redispatch
  monitor-uri /haproxy-ping

  timeout connect 7s
  timeout queue   15s
  timeout client  300s
  timeout server  300s

  # Enable status page at this URL, on the port HAProxy is bound to
  stats enable
  stats uri /haproxy-status
  stats refresh 5s
  stats realm Haproxy\ statistics

frontend zopecluster
  bind ${options.bind}
  default_backend zope
  # capture cookie __ac len 10
  option httplog
  log 127.0.0.1 local6

# Load balancing over the zope instances
backend zope
  # Use IP based stickiness
  stick-table type ip size 1m expire 10s store http_req_rate(10s)

  # Otherwise add a cookie called "serverid" for maintaining session stickiness.
  # This cookie lasts until the client's browser closes, and is invisible to Zope.
  cookie serverid insert nocache indirect

  # If no session found, use the roundrobin load-balancing algorithm to pick a backend.
  balance roundrobin

  # Use / (the default) for periodic backend health checks
  option httpchk

  # Server options:
  # "cookie" sets the value of the serverid cookie to be used for the server
  # "maxconn" is how many connections can be sent to the server at once
  # "check" enables health checks
  # "rise 1" means consider Zope up after 1 successful health check
  {% with items=options['backends'].split('\n')%}
    {% for item in items %}
      server  instance${items.index(item)} ${item} cookie p010${items.index(item)} check maxconn 2 rise 1
    {% end %}
  {% end %}
